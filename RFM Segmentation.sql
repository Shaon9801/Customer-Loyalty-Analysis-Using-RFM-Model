

CREATE TABLE Sales_Data (
    ORDERNUMBER	INT,
    QUANTITYORDERED	INT,
    PRICEEACH	INT,
    ORDERLINENUMBER	INT,
    SALES	DOUBLE,
    ORDERDATE	VARCHAR(512),
    STATUS	VARCHAR(512),
    QTR_ID	INT,
    MONTH_ID	INT,
    YEAR_ID	INT,
    PRODUCTLINE	VARCHAR(512),
    MSRP	INT,
    PRODUCTCODE	VARCHAR(512),
    CUSTOMERNAME	VARCHAR(512),
    PHONE	VARCHAR(512),
    ADDRESSLINE1	VARCHAR(512),
    ADDRESSLINE2	VARCHAR(512),
    CITY	VARCHAR(512),
    STATE	VARCHAR(512),
    POSTALCODE	INT,
    COUNTRY	VARCHAR(512),
    TERRITORY	VARCHAR(512),
    CONTACTLASTNAME	VARCHAR(512),
    CONTACTFIRSTNAME	VARCHAR(512),
    DEALSIZE	VARCHAR(512)
);
-- Ensure the table is formatted with properly labeled and meaningful column names.
CREATE OR REPLACE VIEW ORDER_DETAILS AS
WITH CTE AS 
(
    SELECT
        ORDERNUMBER AS ORDER_NUMBER,
        CUSTOMERNAME AS COMPANY_NAME,
        CONCAT(CONTACTFIRSTNAME, ' ', CONTACTLASTNAME) AS CUSTOMER_NAME,
        QUANTITYORDERED AS QTY_ORDERS,
        SALES AS SALES,
        STR_TO_DATE(ORDERDATE, '%d/%m/%y') AS ORDER_DATE,
        STATUS AS STATUS,
        PRICEEACH AS PRICE_EACH,
        ORDERLINENUMBER AS ORDER_LINE_NUMBER,
        QTR_ID,
        YEAR_ID AS YEAR,
        MONTH_ID AS MONTH,
        PRODUCTCODE AS PRODUCT_CODE,
        PRODUCTLINE AS PRODUCT_LINE,
        CITY AS CITY,
        STATE AS STATE,
        COUNTRY AS COUNTRY,
        DEALSIZE AS DEAL_SIZE
    FROM SALES_DATA
) 
SELECT * FROM CTE;

 
-- 1. KPI METRICS ANALYSIS:
SELECT 
    COUNT(DISTINCT ORDERNUMBER) AS TOTAL_ORDERS_ID,
    COUNT(ORDERLINENUMBER) AS TOTAL_ORDERS,
    SUM(QTY_ORDERS) AS TOTAL_QTY_ORDERS,
    ROUND(SUM(SALES), 0) AS TURNOVER,
    COUNT(DISTINCT COUNTRY) AS TOTAL_COUNTRY
FROM
    ORDER_DETAILS;

-- 2. DEAL SIZE ANALYSIS BY COUNTRY:
SELECT 
    DEAL_SIZE,
    ROUND(SUM(SALES), 0) AS SALES_$
FROM 
    ORDER_DETAILS
GROUP BY 1
ORDER BY 2 DESC;

-- 3. SALES BY COUNTRY AND MONTH:
SELECT 
    COUNTRY,
    MONTHNAME(ORDER_DATE),
    ROUND(SUM(SALES), 0) AS SALES_$
FROM 
    ORDER_DETAILS
GROUP BY 1, 2
ORDER BY 3 DESC;

-- 4. SALES BY PRODUCT LINE AND DEAL SIZE:
SELECT 
    PRODUCT_LINE,
    ROUND(SUM(CASE WHEN DEAL_SIZE='SMALL' THEN SALES ELSE 0 END), 0) AS 'SMALL_SALES_$',
    ROUND(SUM(CASE WHEN DEAL_SIZE='MEDIUM' THEN SALES ELSE 0 END), 0) AS 'MEDIUM_SALES_$',
    ROUND(SUM(CASE WHEN DEAL_SIZE='LARGE' THEN SALES ELSE 0 END), 0) AS 'LARGE_SALES_$'
FROM 
    ORDER_DETAILS
GROUP BY 1;

-- 5. SALES TREND ANALYSIS:
WITH SALES_TREND_TIME AS 
    (SELECT
        STR_TO_DATE(ORDER_DATE, '%d/%m/%y') AS DATE,
        YEAR AS YEAR_ID,
        MONTH(ORDER_DATE) AS MONTH_LINE,
        MONTHNAME(ORDER_DATE) AS MONTH_NAME,
        ORDER_DETAILS.*
    FROM ORDER_DETAILS)
SELECT 
    YEAR_ID, 
    MONTH_LINE, 
    MONTH_NAME,
    ROUND(SUM(SALES), 0) AS TOTAL_SALES
FROM 
    SALES_TREND_TIME
GROUP BY 1, 2, 3
ORDER BY 1, 2;

-- 6. SALES BY WEEKDAY AND MARKET SHARE:
WITH SALES_TREND_TIME AS 
    (SELECT
        STR_TO_DATE(ORDER_DATE, '%d/%m/%y') AS DATE,
        DAYNAME(ORDER_DATE) AS DAY,
        MONTHNAME(ORDER_DATE) AS MONTH_NAME,
        ORDER_DETAILS.*
    FROM ORDER_DETAILS)
SELECT 
    DAY,
    ROUND(SUM(SALES), 0) AS WEEKLY_SALES_COMPARISON_$,
    ROUND((ROUND(SUM(SALES), 0)) * 100 / ((SELECT ROUND(SUM(SALES), 0) FROM ORDER_DETAILS)), 1) AS MARKET_SHARE_PERCENTAGE
FROM 
    SALES_TREND_TIME
GROUP BY 1
ORDER BY 2 DESC;

-- 7. CUSTOMER SEGMENTATION (RFM):
CREATE OR REPLACE VIEW RFM AS
WITH CUSTOMER_SUMMARY_TABLE AS 
    (SELECT 
        CUSTOMERNAME,
        DATEDIFF((SELECT MAX(STR_TO_DATE(ORDERDATE, '%d/%m/%y')) FROM SALES_DATA), MAX(STR_TO_DATE(ORDERDATE, '%d/%m/%y'))) AS R_VALUES,
        COUNT(DISTINCT ORDERNUMBER) AS F_VALUES,
        ROUND(SUM(SALES), 0) AS M_VALUES
    FROM SALES_DATA 
    GROUP BY CUSTOMERNAME),
RFM_SCORE AS 
    (SELECT S.*,
            NTILE(5) OVER(ORDER BY R_VALUES DESC) AS R_SCORE,
            NTILE(5) OVER(ORDER BY F_VALUES DESC) AS F_SCORE,
            NTILE(5) OVER(ORDER BY M_VALUES DESC) AS M_SCORE
    FROM CUSTOMER_SUMMARY_TABLE AS S),
RFM_COMBINATION_SCORE AS
    (SELECT R.*, 
            (R_SCORE + F_SCORE + M_SCORE) AS TOTAL_RMF,
            CONCAT_WS('', R_SCORE, F_SCORE, M_SCORE) AS RFM_SCORE_COMBINATION
    FROM RFM_SCORE AS R)
SELECT 
    RC.*,
    CASE 
        WHEN RFM_SCORE_COMBINATION IN (455, 542, 544, 552, 553, 452, 545, 554, 555) THEN 'CHAMPIONS'
        WHEN RFM_SCORE_COMBINATION IN (344, 345, 353, 354, 355, 443, 451, 342, 351, 352, 441, 442, 444, 445, 453, 454, 541, 543, 515, 551) THEN 'LOYAL CUSTOMERS'
        WHEN RFM_SCORE_COMBINATION IN (414, 415, 214, 211, 212, 213, 241, 251, 312, 314, 311, 313, 315, 243, 245, 252, 253, 255, 242, 244, 254) THEN 'PROMISING CUSTOMERS'
        WHEN RFM_SCORE_COMBINATION IN(513, 413, 511, 411, 512, 341, 412, 343, 514) THEN 'POTENTIAL LOYALISTS'
        WHEN RFM_SCORE_COMBINATION IN (141, 142, 143, 144, 151, 152, 155, 145, 153, 154, 215) THEN 'NEEDS ATTENTION'
        WHEN RFM_SCORE_COMBINATION IN (113, 111, 112, 114, 115) THEN 'ABOUT TO SLEEP'
        ELSE 'OTHER'
    END AS CUSTOMER_SEGMENTATION
FROM 
    RFM_COMBINATION_SCORE AS RC;

-- 8. CUSTOMER SALES SEGMENTATION BY COUNTRY:
SELECT 
    COUNTRY,
    SUM(CASE WHEN CUSTOMER_SEGMENTATION = 'CHAMPIONS' THEN QUANTITYORDERED ELSE 0 END) AS 'CHAMPIONS',
    SUM(CASE WHEN CUSTOMER_SEGMENTATION = 'LOYAL CUSTOMERS' THEN QUANTITYORDERED ELSE 0 END) AS 'LOYAL CUSTOMERS',
    SUM(CASE WHEN CUSTOMER_SEGMENTATION = 'LOYAL CUSTOMERS' THEN QUANTITYORDERED ELSE 0 END) AS 'LOYAL CUSTOMERS',
    SUM(CASE WHEN CUSTOMER_SEGMENTATION = 'POTENTIAL LOYALISTS' THEN QUANTITYORDERED ELSE 0 END) AS 'POTENTIAL LOYALISTS',
    SUM(CASE WHEN CUSTOMER_SEGMENTATION = 'NEEDS ATTENTION' THEN QUANTITYORDERED ELSE 0 END) AS 'NEEDS ATTENTION',
    SUM(CASE WHEN CUSTOMER_SEGMENTATION = 'ABOUT TO SLEEP' THEN QUANTITYORDERED ELSE 0 END) AS 'ABOUT TO SLEEP',
    SUM(CASE WHEN CUSTOMER_SEGMENTATION = 'OTHER' THEN QUANTITYORDERED ELSE 0 END) AS 'OTHER'
FROM 
    SALES_DATA AS OD
LEFT JOIN 
    RFM AS R ON OD.CUSTOMERNAME = R.CUSTOMERNAME
GROUP BY 1;

-- 9. TOP CUSTOMERS BY SALES IN USA:
SELECT 
    *
FROM
    (SELECT 
        CUSTOMERNAME AS COMPANY_NAME,
        ROUND(SUM(SALES), 0) AS TOTAL_SALES,
        COUNT(DISTINCT ORDERLINENUMBER) AS TOTAL_ORDERS
    FROM 
        SALES_DATA
    WHERE COUNTRY = 'USA'
    GROUP BY CUSTOMERNAME) AS SUMMARY_TABLE
HAVING TOTAL_SALES BETWEEN 75000 AND 100000
ORDER BY 2 DESC
LIMIT 5;

-- 10. PRODUCT CATEGORIES TYPE:
SELECT DISTINCT 
    PRODUCT_LINE
FROM 
    ORDER_DETAIL;